GIT-KURS Udemy

Git Bash

pwd: wo bin ich (Pfad/directory)
cd: change directory
cd ..: ins Vz. drüber wechseln
ls: Verzeichnisse anzeigen
ls 	-a: auch versteckte Vz. anzeigen
	-l: Rechte anzeigen
mkdir <name>: Verzeichnis <name>erstellen
touch <name>: Datei erstellen
mv <name> <newName>
mv <name> <path>
cp <name> <copyName> <path>
rm
rm -r

clear

git config --global core.editor nano
nano 
ctrl + o <-| (enter)
ctrl x

git init
git status: zeigt unversionierte Dateien an

staging area & commits

Ablauf:
working directory
|	git add
V
staging area 
|	git commit
V
repository

commit: aktuelle/r 'Version'/Zustand der Datei(en)
wird vorbereitet in der staging area, dahin gelangt sie über
git add <file oder folder>
--> (use "git rm --cached <file>..." to unstage)

nach änderung der gestageten Datei:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)

ohne weiteres git add werden Änderungen nicht verfolgt!
Allerdings ist der vorige Zustand dann 'weg'

git commit: best practice: eine atomare änderung pro commit
git commit -m "<message>": Änderung spezifizieren, möglichst genau und verständlich, gut: auf Englisch

danach wird angezeigt, wie viele Dateien geändert wurden, wie viele insertions

warning: in the working copy of 'index.html', LF will be replaced by CRLF the next time Git touches it????

git log: zeigt commit-history an, letzte Änderung ganz oben
git log -p: gibt alle Veränderungen (diff) in den commits an, kann aber entsprechend lang werden

q beendet das Ganze


git log --oneline ist übersichtlicher (erste Zeile des Kommentars)

commits überschreiben/letzten commit ändern

Achtung: vorsichtig verwenden, nur bei lokalen Änderungen, nicht im remote Repo, vor allem wenn/wo andere mitarbeiten

git commit --amend

git diff: zeigt (noch nicht gestagete, bevor git add ausgeführt wurde) Änderungen im pwd. a/alte_version b/neue_version, - gelöschte, + hinzugekommene, @@ Zeilen die geändert wurden jeweils @@

git diff --cached: zeigt Änderungen im staging area, sonst wie git diff

git diff <hashÄltererCommit> <hashNeuererCommit> -- <optionalDateiName>: zeigt Änderungen nach commit, sonst wie git diff

git <command> -- <dateiName>: bezieht das command nur auf die Datei, geht auch mit dateiName.* für alle möglichen Endungen

git reset <optionalMitDateiNamen>: nimmt geänderte Dateien aus der staging area wieder raus

in gitbash:
al_ni@ala-windoze MINGW64 ~/Projekte/gitkurs (master)
$ nano muell.txt

al_ni@ala-windoze MINGW64 ~/Projekte/gitkurs (master)
$ git add muell.txt
warning: in the working copy of 'muell.txt', LF will be replaced by CRLF the next time Git touches it

al_ni@ala-windoze MINGW64 ~/Projekte/gitkurs (master)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   muell.txt


al_ni@ala-windoze MINGW64 ~/Projekte/gitkurs (master)
$ git reset
Unstaged changes after reset:
M       muell.txt

al_ni@ala-windoze MINGW64 ~/Projekte/gitkurs (master)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   muell.txt

no changes added to commit (use "git add" and/or "git commit -a")

git reset <commitHash>: nimmt alle commits nach commitHash zurück, die Änderungen bleiben aber im pwd erhalten

git reset --hard <commitHash>: wie git reset <commitHash>, aber die Änderungen werden auch im pwd verworfen - also Achtung! 










